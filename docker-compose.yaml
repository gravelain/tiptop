services:
  # Reverse Proxy avec Let's Encrypt
  traefik:
    image: traefik:v2.10
    command:
      - --providers.docker
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=admin@tiptop.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infrastructure/reverse-proxy/letsencrypt:/letsencrypt
    networks:
      - tiptop-network

  # Backend
  backend:
    build: ./apps/backend
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
    labels:
      - "traefik.http.routers.backend.rule=Host(`api.tiptop.com`)"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tiptop-network

  # Frontend
  frontend:
    build: ./apps/frontend
    ports:
    - "3003:3000" 
    labels:
      - "traefik.http.routers.frontend.rule=Host(`tiptop.com`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
    networks:
      - tiptop-network

  # Monitoring avec Loki et Alertmanager
  grafana:
    image: grafana/grafana-oss:9.5.6
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tiptop-network

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
    - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - tiptop-network

  alertmanager:
    image: prom/alertmanager:v0.25.0
    volumes:
      - ./infrastructure/monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml
    networks:
      - tiptop-network

  loki:
    image: grafana/loki:2.8.2
    volumes:
      - ./infrastructure/monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - tiptop-network

  # Bases de donn√©es
  mysql:
    image: mysql:8.0.34
    ports:
      - "3306:3306"
    env_file: .env
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - tiptop-network

  postgres:
    image: postgres:15.4-alpine
    ports:
      - "5432:5432"
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tiptop-network

  # CI/CD
  jenkins:
    image: jenkins/jenkins:2.426.1-lts-jdk17
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - tiptop-network

  sonarqube:
    image: sonarqube:10.2.1-community
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
    networks:
      - tiptop-network

volumes:
  mysql_data:
  postgres_data:
  jenkins_data:
  prometheus_data:
  grafana_data:

networks:
  tiptop-network:
    driver: bridge
